// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// header_to_fwf_position.cpp
data_frame header_to_fwf_position_cpp(data_frame start_end, strings left_justified, strings read_only);
extern "C" SEXP _DSSAT_header_to_fwf_position_cpp(SEXP start_end, SEXP left_justified, SEXP read_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(header_to_fwf_position_cpp(cpp11::as_cpp<cpp11::decay_t<data_frame>>(start_end), cpp11::as_cpp<cpp11::decay_t<strings>>(left_justified), cpp11::as_cpp<cpp11::decay_t<strings>>(read_only)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _DSSAT_header_to_fwf_position_cpp(SEXP, SEXP, SEXP);
extern SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_DSSAT_header_to_fwf_position_cpp", (DL_FUNC) &_DSSAT_header_to_fwf_position_cpp, 3},
    {"run_testthat_tests",                (DL_FUNC) &run_testthat_tests,                1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_DSSAT(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
